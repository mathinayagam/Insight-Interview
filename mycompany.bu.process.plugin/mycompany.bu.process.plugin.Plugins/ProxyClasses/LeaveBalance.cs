// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace mycompany.bu.process.plugin.Plugins.ProxyClasses
{
    [EntityLogicalNameAttribute("new_leavebalance")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class LeaveBalance : BaseProxyClass
    {
        public new const string LogicalName = "new_leavebalance";
        public const int ObjectTypeCode = 10103;
        public const string PrimaryIdAttribute = "new_leavebalanceid";
        public const string PrimaryNameAttribute = "new_name";
        
        static LeaveBalance()
        {
            BaseProxyClass.RegisterProxyType(typeof(LeaveBalance), "new_leavebalance");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public LeaveBalance() : base(new Entity("new_leavebalance")) { }
        public LeaveBalance(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<LeaveBalance>(); }

        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }

        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }

        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }

        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }

        private static Dictionary<string, eNumberOptions> _numberOptions;

        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }
        /// <summary>
        /// <para>Logical Name: createdby</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedBy_Delegate
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdon</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("createdon");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyyominame")]
        public string CreatedByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: new_employeeid</para>
        /// </summary>
        [AttributeLogicalName("new_employeeid")]
        public EntityReference Employee
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("new_employeeid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("new_employeeid", value, "Employee");
            }
        }

        /// <summary>
        /// <para>Logical Name: importsequencenumber</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("importsequencenumber");
            }
            set
            {
                this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "ImportSequenceNumber");
            }
        }

        /// <summary>
        /// <para>Key Property (Uniqueidentifier)</para>
        /// <para>Logical Name: new_leavebalanceid</para>
        /// </summary>
        [AttributeLogicalName("new_leavebalanceid")]
        public Guid LeaveBalanceId
        {
            get
            {
                return base.Id;
            }
            set
            {
                base.Id = value;
                base.SetPropertyValue("new_leavebalanceid", value, "LeaveBalanceId");
            }
        }

        /// <summary>
        /// <para>Logical Name: new_leavebalance</para>
        /// <para>Minimum Value: -20</para>
        /// <para>Maximum Value: 5000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("new_leavebalance")]
        public decimal? LeaveBalanceAttribute
        {
            get
            {
                return this.GetPropertyValue<decimal?>("new_leavebalance");
            }
            set
            {
                this.SetPropertyValue("new_leavebalance", (decimal?)value, (decimal)-20, (decimal)5000, "LeaveBalanceAttribute");
            }
        }

        /// <summary>
        /// Logical Name: new_leavetype
        /// </summary>
        [AttributeLogicalName("new_leavetype")]
        public eLeaveType? LeaveType
        {
            get
            {
                if (LeaveType_OptionSetValue != null) { return (eLeaveType)LeaveType_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.LeaveType_OptionSetValue = new OptionSetValue((int)value); }
                else this.LeaveType_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: new_leavetype</para>
        /// </summary>
        [AttributeLogicalName("new_leavetype")]
        public OptionSetValue LeaveType_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("new_leavetype");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("new_leavetype", value, "LeaveType_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string LeaveType_Text(IOrganizationService service)
        {
            return this.LeaveType_OptionSetValue.GetOptionSetText(service, this, "new_leavetype");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string LeaveType_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.LeaveType_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: modifiedby</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedBy_Delegate
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedon</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("modifiedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyyominame")]
        public string ModifiedByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: new_name</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("new_name")]
        public string Name
        {
            get
            {
                return this.GetPropertyValue<string>("new_name");
            }
            set
            {
                this.SetPropertyValue("new_name", value, 100, "Name");
            }
        }

        /// <summary>
        /// <para>Logical Name: new_employeeidname</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("new_employeeidname")]
        public string New_EmployeeIdName
        {
            get
            {
                return this.GetPropertyValue<string>("new_employeeidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: new_employeeidyominame</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("new_employeeidyominame")]
        public string New_EmployeeIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("new_employeeidyominame");
            }
        }


        /// <summary>
        /// <para>Logical Name: organizationid</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("organizationid");
            }
        }

        /// <summary>
        /// <para>Logical Name: organizationidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName
        {
            get
            {
                return this.GetPropertyValue<string>("organizationidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: overriddencreatedon</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? RecordCreatedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("overriddencreatedon");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "RecordCreatedOn");
            }
        }


        /// <summary>
        /// Logical Name: statecode
        /// </summary>
        [AttributeLogicalName("statecode")]
        public eLeaveBalance_Status? Status
        {
            get
            {
                if (Status_OptionSetValue != null) { return (eLeaveBalance_Status)Status_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.Status_OptionSetValue = new OptionSetValue((int)value); }
                else this.Status_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statecode</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OptionSetValue Status_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statecode", value, "Status_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string Status_Text(IOrganizationService service)
        {
            return this.Status_OptionSetValue.GetOptionSetText(service, this, "statecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string Status_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.Status_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: statuscode
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public eLeaveBalance_StatusReason? StatusReason
        {
            get
            {
                if (StatusReason_OptionSetValue != null) { return (eLeaveBalance_StatusReason)StatusReason_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.StatusReason_OptionSetValue = new OptionSetValue((int)value); }
                else this.StatusReason_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statuscode</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public OptionSetValue StatusReason_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statuscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statuscode", value, "StatusReason_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string StatusReason_Text(IOrganizationService service)
        {
            return this.StatusReason_OptionSetValue.GetOptionSetText(service, this, "statuscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string StatusReason_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.StatusReason_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: timezoneruleversionnumber</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("timezoneruleversionnumber");
            }
            set
            {
                this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "TimeZoneRuleVersionNumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: utcconversiontimezonecode</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode
        {
            get
            {
                return this.GetPropertyValue<int?>("utcconversiontimezonecode");
            }
            set
            {
                this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "UTCConversionTimeZoneCode");
            }
        }

        /// <summary>
        /// <para>Logical Name: versionnumber</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public int? VersionNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("versionnumber");
            }
        }


        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: new_leavebalance_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetSystemJobs_Regarding(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: new_leavebalance_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetSystemJobs_Regarding(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Name)</b></para>
        /// <para>Schema Name: new_leavebalance_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetBulkDeleteFailures_Name(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Name)</b></para>
        /// <para>Schema Name: new_leavebalance_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetBulkDeleteFailures_Name(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Base Record ID)</b></para>
        /// <para>Schema Name: new_leavebalance_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords_BaseRecordID(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Base Record ID)</b></para>
        /// <para>Schema Name: new_leavebalance_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords_BaseRecordID(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Duplicate Record ID)</b></para>
        /// <para>Schema Name: new_leavebalance_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords_DuplicateRecordID(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Duplicate Record ID)</b></para>
        /// <para>Schema Name: new_leavebalance_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetDuplicateRecords_DuplicateRecordID(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding Object Id)</b></para>
        /// <para>Schema Name: new_leavebalance_MailboxTrackingFolders</para>
        /// </summary>
        public List<Entity> GetMailboxAutoTrackingFolders_RegardingObjectId(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding Object Id)</b></para>
        /// <para>Schema Name: new_leavebalance_MailboxTrackingFolders</para>
        /// </summary>
        public List<Entity> GetMailboxAutoTrackingFolders_RegardingObjectId(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Entity instance)</b></para>
        /// <para>Schema Name: new_leavebalance_PrincipalObjectAttributeAccesses</para>
        /// </summary>
        public List<Entity> GetFieldSharing_EntityInstance(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Entity instance)</b></para>
        /// <para>Schema Name: new_leavebalance_PrincipalObjectAttributeAccesses</para>
        /// </summary>
        public List<Entity> GetFieldSharing_EntityInstance(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: new_leavebalance_ProcessSession</para>
        /// </summary>
        public List<Entity> GetProcessSessions_Regarding(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: new_leavebalance_ProcessSession</para>
        /// </summary>
        public List<Entity> GetProcessSessions_Regarding(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Record)</b></para>
        /// <para>Schema Name: new_leavebalance_SyncErrors</para>
        /// </summary>
        public List<Entity> GetSyncErrors_Record(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Record)</b></para>
        /// <para>Schema Name: new_leavebalance_SyncErrors</para>
        /// </summary>
        public List<Entity> GetSyncErrors_Record(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Object Id)</b></para>
        /// <para>Schema Name: new_leavebalance_UserEntityInstanceDatas</para>
        /// </summary>
        public List<Entity> GetUserEntityInstanceData_ObjectId(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Object Id)</b></para>
        /// <para>Schema Name: new_leavebalance_UserEntityInstanceDatas</para>
        /// </summary>
        public List<Entity> GetUserEntityInstanceData_ObjectId(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }


        
        
        
        public static class Properties
        {
            /// <summary>
            /// <para>Created By</para>
            /// <para>Logical Name = createdby</para>
            /// </summary>
            public const string CreatedBy = "createdby";

            /// <summary>
            /// <para>Created By (Delegate)</para>
            /// <para>Logical Name = createdonbehalfby</para>
            /// </summary>
            public const string CreatedBy_Delegate = "createdonbehalfby";

            /// <summary>
            /// <para>Created On</para>
            /// <para>Logical Name = createdon</para>
            /// </summary>
            public const string CreatedOn = "createdon";

            /// <summary>
            /// <para>Logical Name = createdbyname</para>
            /// </summary>
            public const string CreatedByName = "createdbyname";

            /// <summary>
            /// <para>Logical Name = createdbyyominame</para>
            /// </summary>
            public const string CreatedByYomiName = "createdbyyominame";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyname</para>
            /// </summary>
            public const string CreatedOnBehalfByName = "createdonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyyominame</para>
            /// </summary>
            public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";

            /// <summary>
            /// <para>Employee</para>
            /// <para>Logical Name = new_employeeid</para>
            /// </summary>
            public const string Employee = "new_employeeid";

            /// <summary>
            /// <para>Import Sequence Number</para>
            /// <para>Logical Name = importsequencenumber</para>
            /// </summary>
            public const string ImportSequenceNumber = "importsequencenumber";

            /// <summary>
            /// <para>Leave Balance</para>
            /// <para>Logical Name = new_leavebalanceid</para>
            /// </summary>
            public const string LeaveBalanceId = "new_leavebalanceid";

            /// <summary>
            /// <para>Leave Balance</para>
            /// <para>Logical Name = new_leavebalance</para>
            /// </summary>
            public const string LeaveBalanceAttribute = "new_leavebalance";

            /// <summary>
            /// <para>Leave Type</para>
            /// <para>Logical Name = new_leavetype</para>
            /// </summary>
            public const string LeaveType = "new_leavetype";

            /// <summary>
            /// <para>Modified By</para>
            /// <para>Logical Name = modifiedby</para>
            /// </summary>
            public const string ModifiedBy = "modifiedby";

            /// <summary>
            /// <para>Modified By (Delegate)</para>
            /// <para>Logical Name = modifiedonbehalfby</para>
            /// </summary>
            public const string ModifiedBy_Delegate = "modifiedonbehalfby";

            /// <summary>
            /// <para>Modified On</para>
            /// <para>Logical Name = modifiedon</para>
            /// </summary>
            public const string ModifiedOn = "modifiedon";

            /// <summary>
            /// <para>Logical Name = modifiedbyname</para>
            /// </summary>
            public const string ModifiedByName = "modifiedbyname";

            /// <summary>
            /// <para>Logical Name = modifiedbyyominame</para>
            /// </summary>
            public const string ModifiedByYomiName = "modifiedbyyominame";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyname</para>
            /// </summary>
            public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyyominame</para>
            /// </summary>
            public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";

            /// <summary>
            /// <para>Name</para>
            /// <para>Logical Name = new_name</para>
            /// </summary>
            public const string Name = "new_name";

            /// <summary>
            /// <para>Logical Name = new_employeeidname</para>
            /// </summary>
            public const string New_EmployeeIdName = "new_employeeidname";

            /// <summary>
            /// <para>Logical Name = new_employeeidyominame</para>
            /// </summary>
            public const string New_EmployeeIdYomiName = "new_employeeidyominame";

            /// <summary>
            /// <para>Logical Name = new_leavetypename</para>
            /// </summary>
            public const string New_leavetypeName = "new_leavetypename";

            /// <summary>
            /// <para>Organization Id</para>
            /// <para>Logical Name = organizationid</para>
            /// </summary>
            public const string OrganizationId = "organizationid";

            /// <summary>
            /// <para>Logical Name = organizationidname</para>
            /// </summary>
            public const string OrganizationIdName = "organizationidname";

            /// <summary>
            /// <para>Record Created On</para>
            /// <para>Logical Name = overriddencreatedon</para>
            /// </summary>
            public const string RecordCreatedOn = "overriddencreatedon";

            /// <summary>
            /// <para>Logical Name = statecodename</para>
            /// </summary>
            public const string StatecodeName = "statecodename";

            /// <summary>
            /// <para>Status</para>
            /// <para>Logical Name = statecode</para>
            /// </summary>
            public const string Status = "statecode";

            /// <summary>
            /// <para>Status Reason</para>
            /// <para>Logical Name = statuscode</para>
            /// </summary>
            public const string StatusReason = "statuscode";

            /// <summary>
            /// <para>Logical Name = statuscodename</para>
            /// </summary>
            public const string StatuscodeName = "statuscodename";

            /// <summary>
            /// <para>Time Zone Rule Version Number</para>
            /// <para>Logical Name = timezoneruleversionnumber</para>
            /// </summary>
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";

            /// <summary>
            /// <para>UTC Conversion Time Zone Code</para>
            /// <para>Logical Name = utcconversiontimezonecode</para>
            /// </summary>
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";

            /// <summary>
            /// <para>Version Number</para>
            /// <para>Logical Name = versionnumber</para>
            /// </summary>
            public const string VersionNumber = "versionnumber";

        }

    }
}
